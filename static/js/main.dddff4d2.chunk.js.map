{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","filteredRobots","filter","robots","toLowerCase","includes","length","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,yBAAKC,UAAW,qDACR,yBAAKC,IAAI,QAAQC,IAAG,+BAA4BH,EAA5B,cACxB,6BACI,4BAAMF,GACN,2BAAKC,MCeNK,EAnBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACI,6BAEQA,EAAMC,KAAI,SAACC,EAAKC,GAChB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAMG,GAAGR,GACbF,KAAMO,EAAMG,GAAGV,KACfC,MAAOM,EAAMG,GAAGT,aCApBW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACf,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAa,eACbC,SAAaH,MCAPI,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAO,wBAAyBC,OAAQ,UACtEJ,EAAMK,WCgBJC,E,kDAlBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAUf,OAAIC,KAAKF,MAAMC,SACJ,yDAEJC,KAAKT,MAAMK,a,GAdCK,aC0DZC,G,wDAxCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEpB,YAAamB,EAAME,OAAOC,SAb1C,EAAKT,MAAQ,CACTnB,MAAO,GACPM,YAAa,IAJP,E,gEAQM,IAAD,OACfuB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAI,EAAKwB,SAAS,CAAE1B,MAAOE,S,+BAOnC,IAAD,EACyBmB,KAAKF,MAA3BnB,EADH,EACGA,MAAMM,EADT,EACSA,YACR2B,EAAiBjC,EAAMkC,QAAQ,SAAAC,GACjC,OAAOA,EAAO1C,KAAK2C,cAAcC,SAAS/B,EAAY8B,kBAI1D,OAAwB,IAAjBpC,EAAMsC,OAAc,uCAEvB,yBAAK1C,UAAU,MACX,wBAAIiB,MAAQ,CAAC0B,SAAU,QAAvB,eACA,kBAAC,EAAD,CAAWhC,aAAec,KAAKG,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACK,kBAAC,EAAD,CAAUxB,MAAUiC,W,GAlC3BX,cCNEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dddff4d2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    //const { name, email, id } = props;\n    return(\n        <div className ='bg-light-gray dib br3 ma2 grow shadow-5 w-23 h-40'>\n                <img alt='robot' src = {`https://robohash.org/${id}?200X200`} />\n            <div>\n                <h2>{ name }</h2> \n                <p>{ email }</p>\n            </div>  \n        </div>    \n\n    );\n}\n\nexport default Card;","//自動把各機器人特徵以迴圈的方式放到各卡片中，這樣就不用在undex.js的地方逐一放入\nimport React from 'react';\nimport Card from './Card'\n\n\nconst CardList = ( {robot} ) => { //pure components\n    return (\n        <div>\n            {\n                robot.map((user,i) => {\n                return (\n                    <Card \n                    key={i}\n                    id={robot[i].id} \n                    name={robot[i].name} \n                    email={robot[i].email}\n                    />\n                    );\n                })\n            }\n        </div>    \n    );\n}\n\nexport default CardList;"," import React from 'react';\n\n const SearchBox = ({searchfield, searchChange}) => {\n     return(\n         <div className='pa2'>\n         <input \n         className='pa3 ba b--green bg-lightest-blue' \n         type='search' \n         placeholder ='search robot' \n         onChange = { searchChange } //everytime the onchange event is triggered, it communicate with the parent (App) with the fn onSearchChange \n         />\n         </div> \n     );\n }\n\n export default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return( \n        <div style = {{overflowY:'scroll', border:'1px solid transparent', height: '600px'}}>\n            {props.children} \n        </div>    \n    )}\n\nexport default Scroll; ","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n   \n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }else {\n        return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\n// const App = () => {\n//     return (\n//         <div className='tc'>\n//         <h1>RoboFriends</h1>\n//         <SearchBox />\n//         <CardList robot = {robot}/> \n//         </div>\n//     );\n// }\n\nclass App extends Component {\n\n    constructor() {\n        super()\n        this.state = {   //state is what decribes our app\n            robot: [],\n            searchfield: ''\n        }\n    } \n\n    componentDidMount(){ //make request from API?\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(user => this.setState({ robot: user}));\n    }\n\n    onSearchChange = (event) =>  {\n        this.setState({ searchfield: event.target.value })       \n    }  \n  \n    render() {\n        const { robot,searchfield } = this.state;\n        const filteredRobots = robot.filter( robots => {\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase()); //Lowercase的目的是為了消除大小寫而無法比較的因素\n              //includes是一種比較的方式\n              //用this.searchfield因為searchfield是state的其中一部分\n            })\n        return robot.length === 0? <h1>Loading</h1> ://!robot.length\n        (   \n            <div className='tc'>\n                <h1 style= {{fontSize: '3em'}}>ROBOFRIENDS</h1>\n                <SearchBox searchChange={ this.onSearchChange } />\n                <Scroll>\n                    <ErrorBoundry>\n                         <CardList robot = { filteredRobots }/>  \n                    </ErrorBoundry>\n                </Scroll>\n             </div>\n        );\n    }\n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; //this does DOM manipulation for us\nimport ReactDOM from 'react-dom'; //ReactDOM is used for websites\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; \n \nReactDOM.render( //I want the ReacrDOM package to use the function render\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}